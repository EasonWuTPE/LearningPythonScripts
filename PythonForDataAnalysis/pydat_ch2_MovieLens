#!/usr/bin/python3.5 

# MovieLens Data Sets

# Import packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Import and view data 
'''
	The main difference in .read_csv and .read_table is the parameter "sep".
	By default, sep=',' in read_csv and sep='\t' in read_table. 
	However, it can be changed by hand to read different files.
'''
print( "\n***** Take a look for usr, rating and movie data. *****" )

usr_name = [ "usr_id", "gender", "age", "occupation", "zip" ]
usr = pd.read_table( r"./pydata-book/datasets/movielens/users.dat",
						sep = "::", header = None, names = usr_name )
print( "\n*****User data. *****" )
print( usr[:5] )
#usr_sex = usr["gender"].value_counts()
#print( usr_sex )

rnames = [ "usr_id", "movie_id", "rating", "timestamp" ]
ratings = pd.read_table( r"./pydata-book/datasets/movielens/ratings.dat",
						sep = "::", header = None, names = rnames )
print( "\n*****Rating data. *****" )
print( ratings[:5] )

mnames = [ "movie_id", "title", "genres" ]
movies = pd.read_table( r"./pydata-book/datasets/movielens/movies.dat",
						sep = "::", header = None, names = mnames )
print( "\n***** Movies data. *****" )
print( movies[:5] )


# Merge three table into one.
print( "\n***** Merge three data into one table. *****" )
data = pd.merge( pd.merge( ratings, usr ), movies ) 
print( data[:5] ) # A DataFrame.

print( "\n***** data.ix[0]*****" )
# The same as data.iloc[0] to show the first row of data in column direction. 
print( data.ix[0] ) 

print( "\n***** Aggregate the ratings grouped by gender to calculate the mean of rating for each movie. *****" )
mean_ratings = data.pivot_table( "rating", index = "title",
									columns = "gender", aggfunc = "mean" ) 
print( mean_ratings[:5] )

print( "\n***** Aggregate the ratings grouped by gender to calculate the statistic of rating for each movie. *****" )
statis_ratings = data.pivot_table( "rating", index = "title",
									columns = "gender", aggfunc = ["mean","max","min", "var"] ) 
print( statis_ratings[:5] )



# Filter the movies that are rated at least 250 ratings.
ratings_by_title = data.groupby( "title" ).size()
print( "\n*****Grouped by title and use .size() to get a Series of group size for each title.*****" )
print( ratings_by_title[:10] )
print( "*****Then, print the ratings up to 250*****" )
print( ratings_by_title.index[ratings_by_title >= 250][:10] )
active_titles = ratings_by_title.index[ratings_by_title >= 250] 
mean_ratings = mean_ratings.ix[active_titles]
print( "*****Print the ratings above 250 by Female descending.*****" )
print( mean_ratings.sort_index( by = 'F', ascending = False )[:10] )

# Another method same as above.
ratings_by_title_value_counts = data["title"].value_counts()
print( "\n### Another method same as above.###" )
print( "*****Use value_counts(), as same as above without sorting..*****" )
print( ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250][:10] )
active_titles_value_counts = ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250]
mean_ratings_value_counts = mean_ratings.ix[active_titles_value_counts]
print( "*****Print the ratings above 250 by Female descending.*****" )
print( mean_ratings_value_counts.sort_index( by = 'F', ascending = False )[:10] )
print( "######################################" )

print("\n\n\n")
'''
ratings_by_title_value_counts[ratings_by_title_value_counts>=250]
	means that an "Series" that same movie title has be counted over 250 times.
ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250]
	means that it returns an "index" which the same movie title has be counted over 250 times.
'''


print( "*" *60 )
print( "Note:\nThe difference bwteen ratings_by_title_value_counts[ratings_by_title_value_counts>=250] and ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250] " )	
print( ratings_by_title_value_counts[ratings_by_title_value_counts>=250][:10] )
print( ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250][:10] )
print( "*" *60, "\n\n\n" )
'''
counts = 0
if len(ratings_by_title.index[ratings_by_title>=250]) == len(ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250]):
		print( "Same length" )
for i in ratings_by_title.index[ratings_by_title>=250]:
	if i not in ratings_by_title_value_counts.index[ratings_by_title_value_counts>=250]:
		print( "There is %s not in it." %i ) 
		break
	else:
		counts += 1
		pass 
	if counts == len( ratings_by_title.index[ ratings_by_title>=250] ):
		print( "All GOOD" )
'''



	
# Measuring rating divisive
mean_ratings["diff"] = mean_ratings['M'] - mean_ratings['F'] # Add a column "diff" 
sorted_by_diff = mean_ratings.sort_index(by="diff")
print( "****** Measuring the difference of rating between F and M. ******\n ", 
				sorted_by_diff[:5] ) 
print( "****** Measuring the difference of rating between F and M reversely. ******\n ", 
				sorted_by_diff[::-1][:5] ) 

# Standard deviation of rating grouped by title 
rating_std_by_title = data.groupby("title")["rating"].std() 
#print( "** ",rating_std_by_title[:5] )
# Filter down to active_titles, where active_title is the rating >= 250 
rating_std_by_title = rating_std_by_title.ix[active_titles] 
print( "\n***** std of rating >= 250 grouped by title. *****" )
print( rating_std_by_title.sort_values(ascending=False)[:10] ) 




