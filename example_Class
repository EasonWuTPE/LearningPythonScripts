#!/usr/bin/python3.5

# Class 
''' 
	A class ,a coding structure and device used to implement new kinds of objects in Python that support "inheritance", defined with classes can look like the built-in types.
	A class can be thought as packages of functions. "inheritance" is a mechanism of code customization and reuse above and beyond anything. Classes also define new namespaces, like modules, and generate a new object.

'''

# Class Structure
class Name_of_Class( ):

	# define attributes and names which is global in the class

	# initialize the instance of class
	def __init__( self, arg1, arg2, ... ):
		# self represents the built instance of class
		self.arg1 = arg1
		self.arg1 = arg1
			....

	# Define the method1	
	def Method1( self, arg1_, arg2_, ... ):
		
		# Define the method
		# The first arguemnt must accept the instance explicitly.
		# Call another method in the same class by self. reference

	# Define the method2 
	def Method2( self, arg1_, arg2_, ... ):
		
		# Define the method
		# The first arguemnt must accept the instance explicitly.
		# Call another method in the same class by self. reference

	# Any methods or names are called or used by the "self." operation, except that the names are locally in defined methods and won't be called or used by other methods.
	#	i.e. self.Method1, self.arg1.

# Inheritance
# subclass
'''
	The definition and operation of subclass are the same as class. 
	subclass can use the method and names which are defined in the class by "self.". The order is that find the methods and names in the subclass first, then find the class, if not found. If the class still doesn't find the methods and names and is a subclass of another, then find another class.
	This relation of path described above is called "inheritance".
'''
class sub_name_of_Class( Name_of_Class ): # define the subclass with the class in parathensis.

	def __init__( self, arg1, arg2, ... ):
		# self represents the built instance of class
		self.arg1 = arg1
		self.arg1 = arg1
			....

	# Define the method1	
	def sub_Method1( self, arg1_, arg2_, ... ):

	# Define the method2 
	def sub_Method2( self, arg1_, arg2_, ... ):


# Multiple inheritance
'''
	Subclass would find the names and methods that aren't found in subclass along with the path of class1, class2 then class3 in order.
'''
class multiple_subclass( class1, class2, class3, ... ):


#--------------------------------------------------------------------------------
# Example: Class

class Spec():
	
	counter = 120

	def __init__( self, manufactor, year, name ):
		self.manufactor = manufactor
		self.year = year
		self.name = name

	def Brand( self ):
		return self.manufactor

	def Year( self ):
		return self.year

	def Name( self ):
		return self.name

	def emission( self, amount ):
		self.emit = amount

	def Speed( self, speed ):
		self.speed = speed

	def Record( self ):
		self.record = "6:47.3"

# Assign a new class instance to local name x with initialization arguments .
c = Spec( "Porsche", 2017, "GT2RS" ) # c now is a instance object.
c.counter # data attribute
# attribute references: method attribute
c.emission( "3.4L" )
c.Speed("340km/h")
c.Record()
print( c.manufactor, c.year, c.name )
print( c.emit )
print( c.speed )
print( c.record ) 

#--------------------------------------------------------------------------------

#----------------------------another examples------------------------------------
import numpy as np

class perceptron( ):
	
	def __init__( self, eta=0.01, n_iter = 10 ):
		self.eta = eta
		self.n_iter = n_iter
	
	def fit( self, X, y ):
		
		self.w_ = np.zeros( 1 + X.shape[1] ) # Initial the weight by 0
		self.errors_ = [] # expect a 10*1 matrix

		for _ in range(self.n_iter):
			errors = 0
			for (xi, target) in zip(X,y):
				update  = self.eta * (target-self.predict(xi) ) # delta = n(y-yh)
				self.w_[1: ] += update * xi
				self.w_[0] += update * 1
				errors += int( update != 0.0 ) # int( expression ) counts the times that update != 0.0
			self.errors_.append(errors)
		print(self.w_)
		return self

	def net_input( self, X ):
		return np.dot( X, self.w_[1:] ) + self.w_[0]

	def predict( self, X ):
		return np.where( self.net_input(X) >= 0.0, 1, -1 )

#--------------------------------------------------------------------------------




# Private variables

