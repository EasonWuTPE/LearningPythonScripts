#!/usr/bin/python3.5

# Modules
'''
	The highest-level program unit, which packages program code and data for reuse, and provide self-contained namespace that avoids variable names clashes across programs.

	A module's source code file automatically become a module object when that module is imported. The names of modules become attributes of imported module objects.

'''


# import module
'''
	Imports are not just textual insertion of ine file into another. They are runtime operations that perform three steps the first time a program imports a given file.
	

'''

# from module import X, Y, Z
'''
	"from" copies specific name X from one file over to another sxope, it allows us to use the copied names or attributes directly in the script without going through the module.
'''

# from module import *
'''
	"from *", instead of specific names, we gets copies of all names or attributes assigned at the top level of the referenced module. It would pollute the namespace and give unpredictable results.
'''

# import modules v.s. from module import * vs from module import X
'''
	"from" copies a module's specific attributes, such that they become simple variables in the recipient. Thus, you can use the all attributes as name directly instead of attributes reference.

# Three steps of import module and from module import X
	1. Find modules file
		import module statement without file extension and path of file.
	2. Compile it to byte code (if needed).
		*Compile:
			If the byte code file is older than the source file or was created by a different Python version, Python automatically regenerate the byte code when the program is run.	
		*Don't compile:

	3. Run the module's code:
		All statements in the file are run in turn, from top to buttom, and any assignments made to names during this step generate attributes of the resulting module object.
	
	Because of these steps, any given module is imported only once by default. Future imports skip all three steps and reuse the already loaded module in memory.

# Besides three steps, "from module import *" would import all names and attributes in the module into the importing scope.

'''

# Filenames of modules
'''
	Module filenames should end in a .py extension with any name you want ( but not to break the rules for variable names)  and import module without extension. Because module names become variables inside Python program.
	
'''

# imports happen only once.
'''
	First import loads and runs module's code. 
	Second and later import don't rerun module's code, they just fetch the already created module's objects from Python's internal modules table.
	Use reload to reload and rerun the module's code.
'''

# import and from are assignment
'''
	Like def, import and from are executable assigments. They can be nested in if statements. When program reaches, execute the import modules. import also can be nested in def statements.
'''

# reload modules
'''
	The reload function allows parts of program to be changed without stopping the whole program.

	1. reload is a function in Python not a statement.
	2. reload is passed an existing module objects not a new name
	3. reload must be imported from imp
	4. reload runs a module file's new code in the module's current namespace rather than deleting and recreating it.
	5. People who use from to import modules to fetch attributes in the pass won't be affected by reload. They still have the same attribute objects that fetched before reload.

	>> import moduleA  # Module must be imported before reload
	>> ....
	>> from imp import reload # import reload
	>> reload( moduleA )
	>> ....

'''

# Package
'''
	Packages are container for modules and other subpackages. Namely, a package is a directory of Python modules.
		
	The dotted path in statement is assumed to correspond to a path through thr directory hierarchy on your computer, leading to file mod.py, like ".dir0/dir1/dir2/mod.py", where dir0 is added to module search path.

	After Python3.3, except dir0, the container, each directory must contained the file name __init__.py, or it will fail.

	>> import dir1.dir2.mod 	# In this way, you have to add the module search path
	>> from dir1.dir2 import mode   # In this way, you don't have to add the module search path
	like the figure below:
	|-------------------------------------------------------------------------------------------|
	|	dir0\																					|
	|		dir1\																				|
	|			__init__.py																		|
	|			dir2\																			|
	|				__init__.py																	|
	|				mod.py																		|
	|-------------------------------------------------------------------------------------------|
	
	__init__.py declare the directory as a Python package,generate a module namespace for a directory, and implements the behavior of "from ... import * " statements when used with directory import.

	The _init__.py plays some role of below:
		1. Package initialization
		2. Module usability declarations
		3. Module namespace initialization 
		4. from * statement behavior
	The __init__.py can be empty and it is quite different with the __init__ in class, even they are initializztion.

'''



