#!/usr/bin/python3.5

# Modules
'''
	The highest-level program unit, which packages program code and data for reuse, and provide self-contained namespace that avoids variable names clashes across programs.

	A module's source code file automatically become a module object when that module is imported. The names of modules become attributes of imported module objects.

'''


# import module
'''
	Imports are not just textual insertion of ine file into another. They are runtime operations that perform three steps the first time a program imports a given file.
	

'''

# from module import X, Y, Z
'''
	"from" copies specific name X from one file over to another sxope, it allows us to use the copied names or attributes directly in the script without going through the module.
'''

# from module import *
'''
	"from *", instead of specific names, we gets copies of all names or attributes assigned at the top level of the referenced module. It would pollute the namespace and give unpredictable results.
'''

# import modules v.s. from module import * vs from module import X
'''
	"from" copies a module's specific attributes, such that they become simple variables in the recipient. Thus, you can use the all attributes as name directly instead of attributes reference.

# Three steps of import module and from module import X
	1. Find modules file
		import module statement without file extension and path of file.
	2. Compile it to byte code (if needed).
		*Compile:
			If the byte code file is older than the source file or was created by a different Python version, Python automatically regenerate the byte code when the program is run.	
		*Don't compile:

	3. Run the module's code:
		All statements in the file are run in turn, from top to buttom, and any assignments made to names during this step generate attributes of the resulting module object.
	
	Because of these steps, any given module is imported only once by default. Future imports skip all three steps and reuse the already loaded module in memory.

# Besides three steps, "from module import *" would import all names and attributes in the module into the importing scope.

'''

# Filenames of modules
'''
	Module filenames should end in a .py extension with any name you want ( but not to break the rules for variable names)  and import module without extension. Because module names become variables inside Python program.
	
'''

